/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAO.FGAAuditTrail_DAO;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author TAN HUY
 */
public class Backup_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Backup_GUI
     */
    public Backup_GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        txt_quyen.setText(Login_GUI.chucvu_User);
        txt_quyen.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Tạo mô hình cho cboTrangThaiCongNo
        DefaultComboBoxModel<String> modelTrangThaiCongNo = new DefaultComboBoxModel<>();
        //addNullItemToComboBox(modelTrangThaiCongNo);
        // Thêm các trạng thái khác vào combobox
        modelTrangThaiCongNo.addElement("BACKUP DATABASE");
        modelTrangThaiCongNo.addElement("BACKUP AS COMPRESSED BACKUPSET DATABASE");
        modelTrangThaiCongNo.addElement("BACKUP ARCHIVELOG ALL");
        // Thiết lập mô hình cho combobox
        setComboBoxModel(cbo_backup, modelTrangThaiCongNo);
        cbo_backup.setSelectedItem("BACKUP DATABASE");
    }
    // Hàm để thiết lập mô hình cho JComboBox
    private void setComboBoxModel(JComboBox<String> comboBox, DefaultComboBoxModel<String> model) {
        comboBox.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_backup = new javax.swing.JButton();
        btn_retore = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txt_duongdan = new javax.swing.JTextField();
        btn_layduongdan = new javax.swing.JButton();
        btn_khoitaothumuc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_directory = new javax.swing.JTextField();
        txt_quyen = new javax.swing.JTextField();
        btn_backup_rman = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cbo_backup = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Backup and Retore DataBase ");

        btn_backup.setText("Backup Database Dump");
        btn_backup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backupActionPerformed(evt);
            }
        });

        btn_retore.setText("Retore Database Dump");
        btn_retore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_retoreActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tạo thư mục"));

        btn_layduongdan.setText("...");
        btn_layduongdan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_layduongdanActionPerformed(evt);
            }
        });

        btn_khoitaothumuc.setText("Khởi Tạo");
        btn_khoitaothumuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_khoitaothumucActionPerformed(evt);
            }
        });

        jLabel2.setText("Directory :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(btn_khoitaothumuc)
                .addContainerGap(152, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_directory))
                    .addComponent(txt_duongdan))
                .addGap(18, 18, 18)
                .addComponent(btn_layduongdan)
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_duongdan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_layduongdan))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_directory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(btn_khoitaothumuc)
                .addContainerGap())
        );

        txt_quyen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_quyen.setEnabled(false);

        btn_backup_rman.setText("Backup Database Rman");
        btn_backup_rman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backup_rmanActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Kiểu Backup"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(61, 61, 61)
                    .addComponent(cbo_backup, 0, 234, Short.MAX_VALUE)
                    .addGap(62, 62, 62)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(cbo_backup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(39, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_backup, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_retore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_backup_rman, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(201, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_quyen, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(txt_quyen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btn_backup)
                .addGap(27, 27, 27)
                .addComponent(btn_retore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_backup_rman)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backupActionPerformed
        // TODO add your handling code here:
        try {
            // Đường dẫn của lệnh expdp
            String expdpCommand = "expdp";

            // Thông tin kết nối và tham số khác
            String username = "NV001";
            String password = "NV001";
            String databaseUrl = "DB_HSBT";
            String directory = txt_directory.getText().trim();
            String dumpfile = "bakup.dmp";
            String schemas = "NV001";

            // Xây dựng lệnh cmd
            ProcessBuilder processBuilder = new ProcessBuilder(
                    expdpCommand,
                    username + "/" + password + "@" + databaseUrl,
                    "DIRECTORY=" + directory,
                    "DUMPFILE=" + dumpfile,
                    "SCHEMAS=" + schemas
            );

            // Thực thi lệnh
            Process process = processBuilder.start();

            // Đọc đầu ra và in ra màn hình (lựa chọn)
            InputStream inputStream = process.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
            }
            // Đọc đầu ra lỗi và in ra màn hình
            InputStream errorStream = process.getErrorStream();
            InputStreamReader errorStreamReader = new InputStreamReader(errorStream);
            BufferedReader errorBufferedReader = new BufferedReader(errorStreamReader);
            while ((line = errorBufferedReader.readLine()) != null) {
                System.err.println(line); // In ra màn hình lỗi
            }
            // Đợi cho quá trình kết thúc
            int exitCode = process.waitFor();

            // In mã lỗi nếu có
            System.out.println("Exit code: " + exitCode);

            // Hiển thị thông báo dựa vào exitCode
            if (exitCode == 0) {
                JOptionPane.showMessageDialog(null, "Dữ liệu backup thành công!");
            } else {
                JOptionPane.showMessageDialog(null, "Quá trình backup dữ liệu đã phát sinh lỗi!");
            }

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_backupActionPerformed

    private void btn_retoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_retoreActionPerformed
        // TODO add your handling code here:
        try {
            // Thông tin kết nối và tham số khác
            String username = "NV001";
            String password = "NV001";
            String databaseUrl = "DB_HSBT";
            String directory = txt_directory.getText().trim();
            String dumpfile = "backup.dmp";
            String schemas = "NV001";

            // Xây dựng lệnh expdp
            String expdpCommand = "expdp " + username + "/" + password + "@" + databaseUrl
                    + " DIRECTORY=" + directory
                    + " DUMPFILE=" + dumpfile
                    + " SCHEMAS=" + schemas;

            // Thực thi lệnh expdp
            ProcessBuilder expdpProcessBuilder = new ProcessBuilder("cmd", "/c", expdpCommand);
            Process expdpProcess = expdpProcessBuilder.start();

            // Đọc đầu ra và in ra màn hình (lựa chọn)
            InputStream expdpInputStream = expdpProcess.getInputStream();
            InputStreamReader expdpInputStreamReader = new InputStreamReader(expdpInputStream);
            BufferedReader expdpBufferedReader = new BufferedReader(expdpInputStreamReader);
            String expdpLine;
            while ((expdpLine = expdpBufferedReader.readLine()) != null) {
                System.out.println(expdpLine);
            }

            // Đợi cho quá trình kết thúc
            int expdpExitCode = expdpProcess.waitFor();
            System.out.println("Export Exit code: " + expdpExitCode);

            // Kiểm tra xem quá trình export có thành công không
            if (expdpExitCode == 0) {
                // Xây dựng lệnh impdp
                String impdpCommand = "impdp " + username + "/" + password + "@" + databaseUrl
                        + " DIRECTORY=" + directory
                        + " DUMPFILE=" + dumpfile
                        + " SCHEMAS=" + schemas
                        + " REMAP_SCHEMA=" + username;

                // Thực thi lệnh impdp
                ProcessBuilder impdpProcessBuilder = new ProcessBuilder("cmd", "/c", impdpCommand);
                Process impdpProcess = impdpProcessBuilder.start();

                // Đọc đầu ra và in ra màn hình (lựa chọn)
                InputStream impdpInputStream = impdpProcess.getInputStream();
                InputStreamReader impdpInputStreamReader = new InputStreamReader(impdpInputStream);
                BufferedReader impdpBufferedReader = new BufferedReader(impdpInputStreamReader);
                String impdpLine;
                while ((impdpLine = impdpBufferedReader.readLine()) != null) {
                    System.out.println(impdpLine);
                }

                // Đợi cho quá trình kết thúc
                int impdpExitCode = impdpProcess.waitFor();
                System.out.println("Import Exit code: " + impdpExitCode);
            } else {
                System.out.println("That Bai.");
            }

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_retoreActionPerformed

    private void btn_layduongdanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_layduongdanActionPerformed
        // TODO add your handling code here:
        // Tạo đối tượng JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        // Thiết lập chế độ chọn tệp
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // Hiển thị hộp thoại chọn tệp
        int result = fileChooser.showOpenDialog(this);
        // Kiểm tra xem người dùng đã chọn một tệp hay không
        if (result == JFileChooser.APPROVE_OPTION) {
            // Lấy đường dẫn của tệp đã chọn
            String selectedFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            // hiển thị đường dẫn trong một
            txt_duongdan.setText(selectedFilePath);
        }
    }//GEN-LAST:event_btn_layduongdanActionPerformed

    private void btn_khoitaothumucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_khoitaothumucActionPerformed
        // TODO add your handling code here:
        String duongdan = txt_duongdan.getText().trim();
        String directory = txt_directory.getText().trim();

        String sql = String.format("{CALL NV001.CREATE_DIRECTORY_PROC('" + directory + "', '" + duongdan + "')}");
        if (FGAAuditTrail_DAO.ThucHienChucNang(sql) > 0) {
            JOptionPane.showMessageDialog(rootPane, "Thành công");
        }
    }//GEN-LAST:event_btn_khoitaothumucActionPerformed

    private void btn_backup_rmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backup_rmanActionPerformed
        // TODO add your handling code here:
         try {
            String backup = cbo_backup.getSelectedItem().toString();
            String duongdan = txt_duongdan.getText().trim();
            // Tạo một ProcessBuilder với lệnh CMD
            ProcessBuilder processBuilder = new ProcessBuilder("cmd");
            processBuilder.redirectErrorStream(true);
            
            // Bắt đầu tiến trình
            Process process = processBuilder.start();
            
            // Lấy đối tượng PrintWriter để gửi lệnh vào CMD
            PrintWriter printWriter = new PrintWriter(process.getOutputStream());

            // Gửi lệnh RMAN
            sendCommand(printWriter, "RMAN");

            // Gửi lệnh CONNECT
            sendCommand(printWriter, "CONNECT TARGET SYS/Nth99999@DB_HSBT");

            // Gửi lệnh BACKUP
            //String backupCommand = "BACKUP AS COMPRESSED BACKUPSET DATABASE FORMAT 'C:\\Users\\TAN HUY\\Downloads\\TanH\\%U';";
            String backupCommand = backup + " FORMAT '" + duongdan + "\\backup1_%U';";
            sendCommand(printWriter, backupCommand);

            // Đóng PrintWriter để đảm bảo dữ liệu được gửi
            printWriter.close();

            // Đọc đầu ra từ CMD
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            // Đợi tiến trình kết thúc
            int exitCode = process.waitFor();
            System.out.println("Exit code: " + exitCode);

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_backup_rmanActionPerformed
    private static void sendCommand(PrintWriter printWriter, String command) {
        printWriter.println(command);
        printWriter.flush();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Backup_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Backup_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Backup_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Backup_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Backup_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backup;
    private javax.swing.JButton btn_backup_rman;
    private javax.swing.JButton btn_khoitaothumuc;
    private javax.swing.JButton btn_layduongdan;
    private javax.swing.JButton btn_retore;
    private javax.swing.JComboBox<String> cbo_backup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txt_directory;
    private javax.swing.JTextField txt_duongdan;
    private javax.swing.JTextField txt_quyen;
    // End of variables declaration//GEN-END:variables
}
