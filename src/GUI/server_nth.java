/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAO.ThreadSever;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 *
 * @author TAN HUY
 */
public class server_nth extends javax.swing.JFrame {

    private ServerSocket server;
    public Hashtable<String, ThreadSever> listUser;

    public server_nth() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("nth");

        setResizable(false);
        user.setEditable(false);
        go();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        user = new javax.swing.JTextArea();
        close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Trạng Thái Server:");

        user.setColumns(20);
        user.setRows(5);
        jScrollPane1.setViewportView(user);

        close.setForeground(new java.awt.Color(255, 0, 0));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(212, Short.MAX_VALUE)
                .addComponent(close)
                .addGap(197, 197, 197))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(close)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
        try {
            server.close();
        } catch (IOException e1) {
            getUser().append("Không thể dừng được máy chủ\n");
        }
        System.exit(0);
    }//GEN-LAST:event_closeActionPerformed

    public JTextArea getUser() {
        return user;
    }

//    private void go() {
//        new Thread(() -> {
//            try {
//                listUser = new Hashtable<>();
//                server = new ServerSocket(2207);
//                SwingUtilities.invokeLater(() -> getUser().append("Máy chủ bắt đầu phục vụ\n"));
//                while (true) {
//                    Socket client = server.accept();
//                    SwingUtilities.invokeLater(() -> new ThreadSever(this, client).start());
//                }
//            } catch (IOException e) {
//                SwingUtilities.invokeLater(() -> getUser().append("Không thể khởi động máy chủ\n"));
//            }
//        }).start();
//    }
    private void go() {
        new Thread(() -> {
            try {
                listUser = new Hashtable<>();
                server = new ServerSocket(2207);
                SwingUtilities.invokeLater(() -> getUser().append("Máy chủ bắt đầu phục vụ\n"));
                while (true) {
                    Socket client = server.accept();

                    // Lấy địa chỉ IP của khách hàng
                    String clientIP = client.getInetAddress().getHostAddress();
                    System.out.println("\nĐã kết nối từ IP: " + clientIP);

                    ThreadSever threadSever = new ThreadSever(this, client);

                    // Kiểm tra trạng thái trước khi khởi chạy
                    if (!threadSever.isAlive()) {
                        threadSever.start();
                    }
                }
            } catch (IOException e) {
                SwingUtilities.invokeLater(() -> getUser().append("Không thể khởi động máy chủ\n"));
            }
        }).start();
    }

    public void sendAll(String from, String msg) {
        Enumeration e = listUser.keys();
        String name = null;
        while (e.hasMoreElements()) {
            name = (String) e.nextElement();
            if (name.compareTo(from) != 0) {
                listUser.get(name).sendMSG("3", msg);
            }
        }
    }

    public void sendAllUpdate(String from) {
        Enumeration e = listUser.keys();
        String name = null;
        while (e.hasMoreElements()) {
            name = (String) e.nextElement();
            if (name.compareTo(from) != 0) {
                listUser.get(name).sendMSG("4", getAllName());
            }
        }
    }

    public String getAllName() {
        Enumeration e = listUser.keys();
        StringBuilder name = new StringBuilder();
        while (e.hasMoreElements()) {
            name.append(e.nextElement()).append("\n");
        }
        return name.toString();
    }

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server_nth().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea user;
    // End of variables declaration//GEN-END:variables
}
